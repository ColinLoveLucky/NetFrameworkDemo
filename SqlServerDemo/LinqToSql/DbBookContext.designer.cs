#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SqlServerDemo.LinqToSql
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "DbBooks")]
    public partial class DbBookContextDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region 可扩展性方法定义
        partial void OnCreated();
        partial void InsertAuthors(Authors instance);
        partial void UpdateAuthors(Authors instance);
        partial void DeleteAuthors(Authors instance);
        partial void InsertBooks(Books instance);
        partial void UpdateBooks(Books instance);
        partial void DeleteBooks(Books instance);
        partial void InsertBinaryStreams(BinaryStreams instance);
        partial void UpdateBinaryStreams(BinaryStreams instance);
        partial void DeleteBinaryStreams(BinaryStreams instance);
        partial void InsertBinaryStreamsCopy(BinaryStreamsCopy instance);
        partial void UpdateBinaryStreamsCopy(BinaryStreamsCopy instance);
        partial void DeleteBinaryStreamsCopy(BinaryStreamsCopy instance);
        partial void InsertProducts(Products instance);
        partial void UpdateProducts(Products instance);
        partial void DeleteProducts(Products instance);
        partial void InsertStreams(Streams instance);
        partial void UpdateStreams(Streams instance);
        partial void DeleteStreams(Streams instance);
        partial void InsertTextStreams(TextStreams instance);
        partial void UpdateTextStreams(TextStreams instance);
        partial void DeleteTextStreams(TextStreams instance);
        #endregion

        public DbBookContextDataContext() :
                base(global::SqlServerDemo.Properties.Settings.Default.DbBooksConnectionString, mappingSource)
        {
            OnCreated();
        }

        public DbBookContextDataContext(string connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public DbBookContextDataContext(System.Data.IDbConnection connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public DbBookContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public DbBookContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Authors> Authors
        {
            get
            {
                return this.GetTable<Authors>();
            }
        }

        public System.Data.Linq.Table<Books> Books
        {
            get
            {
                return this.GetTable<Books>();
            }
        }

        public System.Data.Linq.Table<BinaryStreams> BinaryStreams
        {
            get
            {
                return this.GetTable<BinaryStreams>();
            }
        }

        public System.Data.Linq.Table<BinaryStreamsCopy> BinaryStreamsCopy
        {
            get
            {
                return this.GetTable<BinaryStreamsCopy>();
            }
        }

        public System.Data.Linq.Table<Products> Products
        {
            get
            {
                return this.GetTable<Products>();
            }
        }

        public System.Data.Linq.Table<Streams> Streams
        {
            get
            {
                return this.GetTable<Streams>();
            }
        }

        public System.Data.Linq.Table<TextStreams> TextStreams
        {
            get
            {
                return this.GetTable<TextStreams>();
            }
        }
        public Table<Vehicle> Vehicles
        {
            get
            {
                return this.GetTable<Vehicle>();
            }
        }
        public Table<Car> Cars
        {
            get
            {
                return this.GetTable<Car>();
            }
        }
        public Table<Truck> Trucks
        {
            get
            {
                return this.GetTable<Truck>();
            }
        }

        [Function(Name = "[dbo].[GetBooks]")]
        public int GetBooksCount(int bookId)
        {
            IExecuteResult result = this.ExecuteMethodCall(this,
        ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookId);
            return (int)result.ReturnValue;
        }
        [Function(Name = "[dbo].[GetQueryBooks]", IsComposable=true)]
        public IQueryable<Book> GetQueryResult()
        {
            return this.CreateMethodCallQuery<Book>(this,
            (MethodInfo)MethodInfo.GetCurrentMethod());
        }
        [Function(Name = "dbo.GetBooksAndAuthors")]
        [ResultType(typeof(Books))]
        [ResultType(typeof(Authors))]//这一句很重要，是多出来的，因为必需要返回一个类型。
        public IMultipleResults Pr_GetUserAndRole()
        {
            IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((IMultipleResults)(result.ReturnValue));
        }

    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Authors")]
    public partial class Authors : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _AuthorId;

        private string _Name;

        private EntitySet<Books> _Books;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAuthorIdChanging(int value);
        partial void OnAuthorIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Authors()
        {
            this._Books = new EntitySet<Books>(new Action<Books>(this.attach_Books), new Action<Books>(this.detach_Books));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_AuthorId", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int AuthorId
        {
            get
            {
                return this._AuthorId;
            }
            set
            {
                if ((this._AuthorId != value))
                {
                    this.OnAuthorIdChanging(value);
                    this.SendPropertyChanging();
                    this._AuthorId = value;
                    this.SendPropertyChanged("AuthorId");
                    this.OnAuthorIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Authors_Books", Storage = "_Books", ThisKey = "AuthorId", OtherKey = "Author_AuthorId")]
        public EntitySet<Books> Books
        {
            get
            {
                return this._Books;
            }
            set
            {
                this._Books.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Books(Books entity)
        {
            this.SendPropertyChanging();
            entity.Authors = this;
        }

        private void detach_Books(Books entity)
        {
            this.SendPropertyChanging();
            entity.Authors = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Books")]
    public partial class Books : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _BookId;

        private string _Title;

        private decimal _Price;

        private string _Genre;

        private System.DateTime _PublishDate;

        private string _Description;

        private System.Nullable<int> _Author_AuthorId;

        private EntityRef<Authors> _Authors;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnBookIdChanging(int value);
        partial void OnBookIdChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnPriceChanging(decimal value);
        partial void OnPriceChanged();
        partial void OnGenreChanging(string value);
        partial void OnGenreChanged();
        partial void OnPublishDateChanging(System.DateTime value);
        partial void OnPublishDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAuthor_AuthorIdChanging(System.Nullable<int> value);
        partial void OnAuthor_AuthorIdChanged();
        #endregion

        public Books()
        {
            this._Authors = default(EntityRef<Authors>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_BookId", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int BookId
        {
            get
            {
                return this._BookId;
            }
            set
            {
                if ((this._BookId != value))
                {
                    this.OnBookIdChanging(value);
                    this.SendPropertyChanging();
                    this._BookId = value;
                    this.SendPropertyChanged("BookId");
                    this.OnBookIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Title", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if ((this._Title != value))
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Price", DbType = "Decimal(18,2) NOT NULL")]
        public decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if ((this._Price != value))
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Genre", DbType = "NVarChar(MAX)")]
        public string Genre
        {
            get
            {
                return this._Genre;
            }
            set
            {
                if ((this._Genre != value))
                {
                    this.OnGenreChanging(value);
                    this.SendPropertyChanging();
                    this._Genre = value;
                    this.SendPropertyChanged("Genre");
                    this.OnGenreChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PublishDate", DbType = "DateTime NOT NULL")]
        public System.DateTime PublishDate
        {
            get
            {
                return this._PublishDate;
            }
            set
            {
                if ((this._PublishDate != value))
                {
                    this.OnPublishDateChanging(value);
                    this.SendPropertyChanging();
                    this._PublishDate = value;
                    this.SendPropertyChanged("PublishDate");
                    this.OnPublishDateChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(MAX)")]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging();
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Author_AuthorId", DbType = "Int")]
        public System.Nullable<int> Author_AuthorId
        {
            get
            {
                return this._Author_AuthorId;
            }
            set
            {
                if ((this._Author_AuthorId != value))
                {
                    if (this._Authors.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnAuthor_AuthorIdChanging(value);
                    this.SendPropertyChanging();
                    this._Author_AuthorId = value;
                    this.SendPropertyChanged("Author_AuthorId");
                    this.OnAuthor_AuthorIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Authors_Books", Storage = "_Authors", ThisKey = "Author_AuthorId", OtherKey = "AuthorId", IsForeignKey = true)]
        public Authors Authors
        {
            get
            {
                return this._Authors.Entity;
            }
            set
            {
                Authors previousValue = this._Authors.Entity;
                if (((previousValue != value)
                            || (this._Authors.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Authors.Entity = null;
                        previousValue.Books.Remove(this);
                    }
                    this._Authors.Entity = value;
                    if ((value != null))
                    {
                        value.Books.Add(this);
                        this._Author_AuthorId = value.AuthorId;
                    }
                    else
                    {
                        this._Author_AuthorId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Authors");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BinaryStreams")]
    public partial class BinaryStreams : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Data.Linq.Binary _bindata;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnbindataChanging(System.Data.Linq.Binary value);
        partial void OnbindataChanged();
        #endregion

        public BinaryStreams()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_bindata", DbType = "VarBinary(MAX)", UpdateCheck = UpdateCheck.Never)]
        public System.Data.Linq.Binary bindata
        {
            get
            {
                return this._bindata;
            }
            set
            {
                if ((this._bindata != value))
                {
                    this.OnbindataChanging(value);
                    this.SendPropertyChanging();
                    this._bindata = value;
                    this.SendPropertyChanged("bindata");
                    this.OnbindataChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.BinaryStreamsCopy")]
    public partial class BinaryStreamsCopy : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Data.Linq.Binary _bindata;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnbindataChanging(System.Data.Linq.Binary value);
        partial void OnbindataChanged();
        #endregion

        public BinaryStreamsCopy()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_bindata", DbType = "VarBinary(MAX)", UpdateCheck = UpdateCheck.Never)]
        public System.Data.Linq.Binary bindata
        {
            get
            {
                return this._bindata;
            }
            set
            {
                if ((this._bindata != value))
                {
                    this.OnbindataChanging(value);
                    this.SendPropertyChanging();
                    this._bindata = value;
                    this.SendPropertyChanged("bindata");
                    this.OnbindataChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Products")]
    public partial class Products : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Id;

        private string _Name;

        private string _Category;

        private System.Nullable<decimal> _Price;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        #endregion

        public Products()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if ((this._Id != value))
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Name", DbType = "NVarChar(MAX)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Category", DbType = "NVarChar(MAX)")]
        public string Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                if ((this._Category != value))
                {
                    this.OnCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._Category = value;
                    this.SendPropertyChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Price", DbType = "Decimal(18,2)")]
        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if ((this._Price != value))
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Streams")]
    public partial class Streams : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _textdata;

        private System.Data.Linq.Binary _bindata;

        private System.Xml.Linq.XElement _xmldata;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntextdataChanging(string value);
        partial void OntextdataChanged();
        partial void OnbindataChanging(System.Data.Linq.Binary value);
        partial void OnbindataChanged();
        partial void OnxmldataChanging(System.Xml.Linq.XElement value);
        partial void OnxmldataChanged();
        #endregion

        public Streams()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_textdata", DbType = "NVarChar(MAX)")]
        public string textdata
        {
            get
            {
                return this._textdata;
            }
            set
            {
                if ((this._textdata != value))
                {
                    this.OntextdataChanging(value);
                    this.SendPropertyChanging();
                    this._textdata = value;
                    this.SendPropertyChanged("textdata");
                    this.OntextdataChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_bindata", DbType = "VarBinary(MAX)", UpdateCheck = UpdateCheck.Never)]
        public System.Data.Linq.Binary bindata
        {
            get
            {
                return this._bindata;
            }
            set
            {
                if ((this._bindata != value))
                {
                    this.OnbindataChanging(value);
                    this.SendPropertyChanging();
                    this._bindata = value;
                    this.SendPropertyChanged("bindata");
                    this.OnbindataChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_xmldata", DbType = "Xml", UpdateCheck = UpdateCheck.Never)]
        public System.Xml.Linq.XElement xmldata
        {
            get
            {
                return this._xmldata;
            }
            set
            {
                if ((this._xmldata != value))
                {
                    this.OnxmldataChanging(value);
                    this.SendPropertyChanging();
                    this._xmldata = value;
                    this.SendPropertyChanged("xmldata");
                    this.OnxmldataChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.TextStreams")]
    public partial class TextStreams : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _textdata;

        #region 可扩展性方法定义
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OntextdataChanging(string value);
        partial void OntextdataChanged();
        #endregion

        public TextStreams()
        {
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_textdata", DbType = "NVarChar(MAX)")]
        public string textdata
        {
            get
            {
                return this._textdata;
            }
            set
            {
                if ((this._textdata != value))
                {
                    this.OntextdataChanging(value);
                    this.SendPropertyChanging();
                    this._textdata = value;
                    this.SendPropertyChanged("textdata");
                    this.OntextdataChanged();
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table]
    [InheritanceMapping(Code = "C", Type = typeof(Car))]
    [InheritanceMapping(Code = "T", Type = typeof(Truck))]
    [InheritanceMapping(Code = "V", Type = typeof(Vehicle),
   IsDefault = true)]
    public class Vehicle
    {
        [Column(IsDiscriminator = true)]
        public string Key;
        [Column(IsPrimaryKey = true)]
        public string VIN;
        [Column]
        public string MfgPlant;
    }
    public class Car : Vehicle
    {
        [Column]
        public int TrimCode;
        [Column]
        public string ModelName;
    }

    public class Truck : Vehicle
    {
        [Column]
        public int Tonnage;
        [Column]
        public int Axles;
    }

    public class Book
    {
        public string Title { get; set; }
    }
}
#pragma warning restore 1591
